v   Análisis
v   001 Definidos los requisitos
Documentación
    00 Documentación del proyecto
v       001 Lista proyectos similares
        002 Escribe plantilla de README.md
        003 Referencia a pytest-cookies en pruebas
        004 Añade enlaces de referencia en archivos de configuración
    01 Documentar flujo de trabajo
Codificación
v   001 Añade .editorconfig
    02 Automatizar flujo con Make
        001 Estudiar git hooks
o   03 Gestión de dependencias y empaquetado con Poetry
o       001 Definir pyproject.toml del proyecto
        002 Definir pyproject.toml de la plantilla
o   04 Pruebas con pytest
v       001 Generado esqueleto del proyecto
o       002 Prueba con parámetros por defecto
v       003 Prueba de generación de slug
v       004 Plantilla de código
v       005 Plantilla de pruebas
v       006 Prueba de ejecución de pruebas en el resultado
o   05 Corrección de estilo con blake, isort
v       001 Configured and passed isort
o   06 Comprobación de estilo con flake8, pydocstyle
v       001 Configuración para comprobar proyecto
v       002 Configuración para comprobar resultado
v       003 Prueba para comprobar resultado
v       004 Exploración de pydocstring. Demasiado estricto, dejar como opcional
v       005 Prueba para comprobar docstring en resultado
    07 Cobertura de código con [Coverage](https://coverage.readthedocs.io/en/v4.5.x/)
        001 Code coverage platform with [Coveralls](https://coveralls.io)?
    08 Generación de documentación con Sphinx
        001 Documentar proyecto con mkdocs
    09 Matriz de pruebas con tox
    10 Integración contínua con Travis
    11 Elegir entre varias licencias
    12 Añadir copyright de compañía
v   13 System dependency version checker
        001 Usar pydocstyle con la opción check-only, añadirlo a los tests y ponerlo en dev
        002 Quizá bajar script verchew y quitar la dependencia
Opcionales
    20 Adaptar para uso como librería o aplicación
    21 Opción para elejir mkdocs o no docs como alternativas
    22 Integración contínua con Jenkins y quizá CircleCI
    23 Publicación automática

Requerimientos (nuevos)
=======================

System dependency version checker with [verchew](https://github.com/jacebrowning/verchew).

There are many tools that are optional for your development. For example you would recommend your team mates to use black as code formatter, but this is not really an enforcement. Black requires Python >= 3.6.0 even though it can reformat Python 2 code too. So if you put black in your development requirements you are pinning the Python version of your project preventing it to be backward compatible. It's better to install black in its own virtual environment available for all your projects (with [pipsi](https://github.com/mitsuhiko/pipsi), for example). Verchew is a convenience script for new team members to ensure their computer has everything needed to work on the project.
